plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'maven-publish'
}

//noinspection GroovyMissingReturnStatement
android {
    compileSdkVersion buildConfig.compileSdk

    defaultConfig {
        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk
        versionCode buildConfig.version.code
        versionName buildConfig.version.name
        consumerProguardFiles 'proguard-rules.pro'

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
        testInstrumentationRunnerArgument "size", "small"

        compileOptions {
            kotlinOptions.freeCompilerArgs += ['-module-name', "${artifactory.groupId}.${artifactory.artifactId}"]
        }

        lintOptions {
            // Turns off checks for the issue IDs you specify.
            disable 'TypographyFractions', 'TypographyQuotes'
            // Turns on checks for the issue IDs you specify. These checks are in
            // addition to the default lint checks.
            enable 'RtlHardcoded', 'RtlCompat', 'RtlEnabled'
            // To enable checks for only a subset of issue IDs and ignore all others,
            // list the issue IDs with the 'check' property instead. This property overrides
            // any issue IDs you enable or disable using the properties above.
            check 'NewApi', 'InlinedApi'
            // If set to true, turns off analysis progress reporting by lint.
            quiet true
            // if set to true (default), stops the build if errors are found.
            abortOnError false
            // if true, only report errors.
            ignoreWarnings true
        }
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests {
            includeAndroidResources = true
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }

    buildTypes {
        debug {
        }
        release {
        }
    }

    compileOptions {
        encoding = "UTF-8"
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    libraryVariants.all { variant ->
        variant.outputs.all { output ->
            def verName = buildConfig.version.name
            outputFileName = artifactory.artifactId + '-' + verName + '.aar'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation deps.kotlin.junit
    testImplementation deps.test.mockk
    testImplementation deps.test.robolectric
    testImplementation deps.androidx.test.coreKtx
    testImplementation deps.androidx.test.runner
    testImplementation deps.androidx.test.rules
    testImplementation deps.androidx.test.junitKtx

    androidTestImplementation deps.kotlin.junit
    androidTestImplementation deps.androidx.test.junitKtx
    androidTestImplementation deps.androidx.test.coreKtx
    androidTestImplementation deps.androidx.test.runner
    androidTestImplementation deps.androidx.test.rules
    androidTestUtil deps.androidx.test.orchestrator

    api deps.appcompat
}

//从这里开始配置

//添加这两行
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

//项目主页--项目的GitHub地址
def siteUrl = 'https://github.com/hgncxzy/keyboard'
//项目的git地址
def gitUrl = 'https://github.com/hgncxzy/keyboard.git'

//发布到JCenter上的项目名字，compile引用时的第2部分项目名
def libName = "keyboard"
//compile引用时的第1部分
group = "com.xzy.util"
// 版本号，//compile引用时的最后部分项目名，下次更新是只需要更改版本号即可
version = "1.0.0"
//上面配置后上传至JCenter后的编译路径是这样的： compile 'com.xzy.util:keyboard:1.0.0'

//生成源文件
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

//生成Javadoc文档
//task javadoc(type: Javadoc) {
//    source = android.sourceSets.main.java.srcDirs
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}

//文档打包成jar
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}

//拷贝javadoc文件
//task copyDoc(type: Copy) {
//    from "${buildDir}/docs/"
//    into "docs"
//}

//上传到JCenter所需要的源码文件
artifacts {
//    archives javadocJar
    archives sourcesJar
}

// 配置maven库，生成POM.xml文件
install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                //项目描述，自由填写
                name 'Keyboard on Android'
                url siteUrl
                licenses {
                    license {
                        //开源协议
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        //开发者的个人信息，根据个人信息填写
                        id 'hgncxzy'
                        name 'arthinking'
                        email 'hgncxzy@gmail.com'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

//上传到JCenter
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")    //读取 local.properties 文件里面的 bintray.user
    key = properties.getProperty("bintray.apikey")   //读取 local.properties 文件里面的 bintray.apikey
    configurations = ['archives']
    pkg {
        //这里的repo值必须要和你创建Maven仓库的时候的名字一样，我们前面创建的就是maven
        repo = "maven"
        //发布到JCenter上的项目名字
        name = libName
        //项目描述
        desc = 'Keyboard on Android'
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true
    }
}

//javadoc {
//    options {
//        //如果你的项目里面有中文注释的话，必须将格式设置为UTF-8，不然会出现乱码
//        encoding "UTF-8"
//        charSet 'UTF-8'
//        author true
//        version true
//        links "http://docs.oracle.com/javase/7/docs/api"
//    }
//}
