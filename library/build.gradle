plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'maven-publish'
}

//noinspection GroovyMissingReturnStatement
android {
    compileSdkVersion buildConfig.compileSdk

    defaultConfig {
        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk
        versionCode buildConfig.version.code
        versionName buildConfig.version.name
        consumerProguardFiles 'proguard-rules.pro'

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
        testInstrumentationRunnerArgument "size", "small"

        compileOptions {
            kotlinOptions.freeCompilerArgs += ['-module-name', "${artifactory.groupId}.${artifactory.artifactId}"]
        }

        lintOptions {
            // Turns off checks for the issue IDs you specify.
            disable 'TypographyFractions', 'TypographyQuotes'
            // Turns on checks for the issue IDs you specify. These checks are in
            // addition to the default lint checks.
            enable 'RtlHardcoded', 'RtlCompat', 'RtlEnabled'
            // To enable checks for only a subset of issue IDs and ignore all others,
            // list the issue IDs with the 'check' property instead. This property overrides
            // any issue IDs you enable or disable using the properties above.
            check 'NewApi', 'InlinedApi'
            // If set to true, turns off analysis progress reporting by lint.
            quiet true
            // if set to true (default), stops the build if errors are found.
            abortOnError false
            // if true, only report errors.
            ignoreWarnings true
        }
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests {
            includeAndroidResources = true
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }

    buildTypes {
        debug {
        }
        release {
        }
    }

    compileOptions {
        encoding = "UTF-8"
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    libraryVariants.all { variant ->
        variant.outputs.all { output ->
            def verName = buildConfig.version.name
            outputFileName = artifactory.artifactId + '-' + verName + '.aar'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation deps.kotlin.junit
    testImplementation deps.test.mockk
    testImplementation deps.test.robolectric
    testImplementation deps.androidx.test.coreKtx
    testImplementation deps.androidx.test.runner
    testImplementation deps.androidx.test.rules
    testImplementation deps.androidx.test.junitKtx

    androidTestImplementation deps.kotlin.junit
    androidTestImplementation deps.androidx.test.junitKtx
    androidTestImplementation deps.androidx.test.coreKtx
    androidTestImplementation deps.androidx.test.runner
    androidTestImplementation deps.androidx.test.rules
    androidTestUtil deps.androidx.test.orchestrator

    api deps.appcompat
}

//从这里开始配置

// 配置完成后，执行 gradlew generateRelease 在本地生成所需的文件,build/release 文件夹中
// 将 com 文件夹以下打包成 zip 包，然后在 jcenter 创建新的版本，并上传该 zip 到新创建的版本
//应用插件 maven
apply plugin: 'maven'

//声明你的包名
def groupId = 'com.xzy.util'
//声明模块名称
def artifactId = 'keyboard'
//要发布的版本号
def version = '1.0.2'

def localReleaseDest = "${buildDir}/release/${version}"

task androidJavadocs(type: Javadoc) {
    failOnError = false
    source = android.sourceSets.main.java.srcDirs
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}
//Maven本地仓库构建
uploadArchives {
    repositories.mavenDeployer {
        pom.groupId = groupId
        pom.artifactId = artifactId
        pom.version = version
        // Add other pom properties here if you want (developer details / licenses)
        repository(url: "file://${localReleaseDest}")
    }
}
//压缩为zip
task zipRelease(type: Zip) {
    from localReleaseDest
    destinationDir buildDir
    archiveName "release-${version}.zip"
}
//输出到本地补录，位于你的模块中的build下
task generateRelease {
    doLast {
        println "Release ${version} can be found at ${localReleaseDest}/"
        //注意此处，Windows系统需要加入\\转义符，Mac请去掉转义符"\\"
        println "Release ${version} zipped can be found ${buildDir}\\release-${version}.zip"
    }
}

generateRelease.dependsOn(uploadArchives)
generateRelease.dependsOn(zipRelease)

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}